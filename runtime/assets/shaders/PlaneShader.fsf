#type vertex
#version 330 core
layout (location = 0) in vec3 a_Pos;
layout (location =1) in vec2 a_TexCoord;
layout (location =2) in vec3 a_Normal;
uniform mat4 u_ViewProjectionMatrix;		
uniform mat4 u_Transform;
uniform mat4 model;

out vec2 v_TexCoord;
out vec3 v_Normal;
out vec3 v_crntPos;
void main()
{
v_crntPos = vec3(model * vec4(a_Pos , 1.0f));
v_TexCoord = a_TexCoord;
v_Normal = a_Normal;
gl_Position = u_ViewProjectionMatrix  *model* u_Transform * vec4(v_crntPos , 1.0);
}

#type pixel
#version 330 core
layout(location=0) out vec4 Color;
in vec2 v_TexCoord;
in vec3 v_Normal;
in vec3 v_crntPos;
uniform sampler2D u_Texture;
uniform sampler2D u_SpecMap;
uniform vec4 u_Color;
uniform vec3 u_LightPos;
uniform vec3 u_CamPos;

vec4 PointLight()
{
	vec3 LightVec = u_LightPos - v_crntPos;
	float dist = length(LightVec);
	float a=0.05f;
	float b=0.01f;
	float intensity = 1.0f/(a* dist * dist + b * dist + 1.0f);
	float ambience =0.3f;
	vec3 normal = normalize(v_Normal);
	vec3 LightDir =normalize(LightVec); 

	float SpecularLight = 0.50f;
	vec3 ViewDir = normalize(u_CamPos - v_crntPos);
	vec3 ReflectionDir =  reflect(-LightDir , normal);
	float s_amt = pow(max(dot(ViewDir,ReflectionDir),0.0f) , 16.0f);
	float specularity = s_amt * SpecularLight;
	float diffusion = max(dot(normal , LightDir) , 0.0f);
	return(texture(u_Texture , v_TexCoord)  * (diffusion*intensity+ambience)+texture(u_SpecMap , v_TexCoord).r * specularity*intensity) * u_Color;
}
vec4 SpecularLight()
{
    vec3 LightVec = u_LightPos - v_crntPos;
	
	float ambience =0.27f;
	vec3 normal = normalize(v_Normal);
	vec3 LightDir =normalize(LightVec);

	float SpecularLight = 0.50f;
	vec3 ViewDir = normalize(u_CamPos - v_crntPos);
	vec3 ReflectionDir =  reflect(-LightDir , normal);
	float s_amt = pow(max(dot(ViewDir,ReflectionDir),0.0f) , 16.0f);
	float specularity = s_amt * SpecularLight;
	float diffusion = max(dot(normal , LightDir) , 0.0f);
	return (texture(u_Texture,v_TexCoord)* u_Color*(diffusion + ambience) +texture(u_SpecMap,v_TexCoord).r *specularity );
}

vec4 SpotLight()
{
    // controls how big the area that is lit up is
	float OuterCone=0.90f;
	float InnerCone=0.95f;

	vec3 LightVec = u_LightPos - v_crntPos;
	float dist = length(LightVec);
	

	float ambience =0.35f;
	vec3 normal = normalize(v_Normal);
	vec3 LightDir =normalize(LightVec);

	float SpecularLight = 0.50f;
	vec3 ViewDir = normalize(u_CamPos - v_crntPos);
	vec3 ReflectionDir =  reflect(-LightDir , normal);
	float s_amt = pow(max(dot(ViewDir,ReflectionDir),0.0f) , 20.0f);
	float specularity = s_amt * SpecularLight;
	float diffusion = max(dot(normal , LightDir) , 0.0f);

	// calculates the intensity of the crntPos based on its angle to the center of the light cone
	float angle = dot(vec3(0.0f, -1.0f, 0.0f), -LightDir);
	float intensity = clamp((angle - OuterCone) / (InnerCone - OuterCone), 0.0f, 1.0f);
	return(texture(u_Texture , v_TexCoord)  * (diffusion*intensity+ambience)+texture(u_SpecMap , v_TexCoord).r * specularity*intensity) * u_Color;
}
void main()
{
	Color = SpecularLight();
}